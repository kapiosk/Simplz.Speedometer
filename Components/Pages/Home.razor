@page "/"

@if (!string.IsNullOrEmpty(locationName))
{
    <div class="alert alert-primary" role="alert">
        @locationName
    </div>
}

<div class="card text-center">
    <h5 class="card-title">@speed.ToString("F") km/h</h5>
    <div class="card-body">
        <div class="progress">
            <div class="progress-bar" role="progressbar" aria-valuenow="@speed" aria-valuemin="0" aria-valuemax="120">
            </div>
        </div>
    </div>
</div>

<div class="card text-center">
    <div class="card-body">
        <p class="card-text">@distance.ToString("F")</p>
        <a href="#" class="btn btn-@geolocation" @onclick=ToggleGeolocationAsync>Toggle</a>
        <a href="#" class="btn btn-primary" @onclick=ClearDistance>Clear</a>
    </div>
</div>

<div class="card text-center">
    <div class="card-body">
        <p class="card-text">@heading.ToString("F")</p>
        <a href="#" class="btn btn-@compass" @onclick=ToggleCompass>Toggle</a>
    </div>
</div>

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-danger" role="alert">
        @message
    </div>
}

@code
{
    private double speed, distance, heading;
    private Location? location;
    private string? message;
    private string? locationName;
    private string compass = "danger";
    private string geolocation = "danger";

    private void ToggleCompass()
    {
        try
        {
            if (Compass.Default.IsSupported)
            {
                if (!Compass.Default.IsMonitoring)
                {
                    Compass.Default.ReadingChanged += Compass_ReadingChanged;
                    Compass.Default.Start(SensorSpeed.Default, applyLowPassFilter: true);
                    compass = "success";
                }
                else
                {
                    Compass.Default.Stop();
                    Compass.Default.ReadingChanged -= Compass_ReadingChanged;
                    compass = "danger";
                }
            }
        }
        catch (Exception ex)
        {
            message = ex.Message;
        }
    }

    private void Compass_ReadingChanged(object? sender, CompassChangedEventArgs e)
    {
        try
        {
            heading = e.Reading.HeadingMagneticNorth;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            message = ex.Message;
        }
    }

    private void ClearDistance()
    {
        distance = 0;
    }

    private async Task ToggleGeolocationAsync()
    {
        try
        {
            if (Geolocation.Default.IsListeningForeground)
            {
                Geolocation.Default.StopListeningForeground();
                Geolocation.Default.LocationChanged -= Geolocation_LocationChanged;
                Geolocation.Default.ListeningFailed -= Geolocation_ListeningFailed;
            }
            else
            {
                var request = new GeolocationListeningRequest();
                var status = await Geolocation.Default.StartListeningForegroundAsync(request);
                if (status)
                {
                    geolocation = "success";
                    Geolocation.Default.LocationChanged += Geolocation_LocationChanged;
                    Geolocation.Default.ListeningFailed += Geolocation_ListeningFailed;
                }
            }
        }
        catch (Exception ex)
        {
            message = ex.Message;
        }
    }

    private void Geolocation_ListeningFailed(object? sender, GeolocationListeningFailedEventArgs e)
    {
        message = e.Error.ToString();
    }

    private void Geolocation_LocationChanged(object? sender, GeolocationLocationChangedEventArgs e)
    {
        try
        {
            speed = (e.Location.Speed ?? 0) / 1000 * 3600;
            if (location is not null)
                distance += location.CalculateDistance(e.Location, DistanceUnits.Kilometers);
            location = e.Location;
            Task.Run(async () =>
            {
                try
                {
                    var placemarks = await Geocoding.GetPlacemarksAsync(location);
                    var placemark = placemarks?.FirstOrDefault();
                    if (placemark is not null)
                    {
                        locationName = string.Join(", ", placemark.AdminArea, placemark.CountryName, placemark.FeatureName, placemark.Locality,
        placemark.PostalCode, placemark.SubAdminArea, placemark.SubLocality, placemark.SubThoroughfare,
        placemark.Thoroughfare);
                        await InvokeAsync(() => StateHasChanged());
                    }
                }
                catch (Exception ex)
                {
                    message = ex.Message;
                }
            });
            StateHasChanged();
        }
        catch (Exception ex)
        {
            message = ex.Message;
        }
    }

    protected override void OnInitialized()
    {
        try
        {
            Microsoft.Maui.Devices.DeviceDisplay.Current.KeepScreenOn = true;
            @* Timer timer = new(new TimerCallback(async _ =>
{
try
{
if (location is not null)
{

}
await InvokeAsync(() => StateHasChanged());
}
catch (Exception ex)
{
message = ex.Message;
}
}), null, 1000, 1000); *@
        }
        catch (Exception ex)
        {
            message = ex.Message;
        }
    }
}
